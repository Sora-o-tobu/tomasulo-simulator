{"ast":null,"code":"import { InstructionType } from './instructionParser';\n\n// 保留站类\nexport class ReservationStation {\n  constructor(name, type) {\n    this.name = name;\n    this.type = type;\n    this.busy = false;\n    this.op = null;\n    this.vj = null;\n    this.vk = null;\n    this.qj = null;\n    this.qk = null;\n    this.dest = null;\n    this.instruction = null;\n    this.remainingCycles = 0;\n  }\n  clear() {\n    this.busy = false;\n    this.op = null;\n    this.vj = null;\n    this.vk = null;\n    this.qj = null;\n    this.qk = null;\n    this.dest = null;\n    this.instruction = null;\n    this.remainingCycles = 0;\n  }\n}\n\n// 寄存器状态类\nexport class RegisterStatus {\n  constructor() {\n    this.value = 0;\n    this.qi = null; // 指向产生该寄存器值的保留站\n  }\n}\n\n// Tomasulo算法核心类\nexport class TomasuloCore {\n  constructor() {\n    this.registers = Array(32).fill().map(() => new RegisterStatus());\n    this.reservationStations = {\n      add: Array(3).fill().map((_, i) => new ReservationStation(`ADD${i + 1}`, 'ADD')),\n      mult: Array(2).fill().map((_, i) => new ReservationStation(`MULT${i + 1}`, 'MULT')),\n      load: Array(2).fill().map((_, i) => new ReservationStation(`LOAD${i + 1}`, 'LOAD'))\n    };\n    this.instructions = [];\n    this.currentCycle = 0;\n    this.instructionQueue = [];\n    this.memory = new Map();\n  }\n\n  // 初始化内存\n  initializeMemory(addresses) {\n    addresses.forEach(({\n      address,\n      value\n    }) => {\n      this.memory.set(address, value);\n    });\n  }\n\n  // 获取可用的保留站\n  getAvailableStation(type) {\n    const stations = this.reservationStations[type.toLowerCase()];\n    return stations.find(station => !station.busy);\n  }\n\n  // 发射指令\n  issue(instruction) {\n    const station = this.getAvailableStation(instruction.type === InstructionType.ADD || instruction.type === InstructionType.SUB ? 'ADD' : instruction.type === InstructionType.MUL || instruction.type === InstructionType.DIV ? 'MULT' : 'LOAD');\n    if (!station) return false;\n    station.busy = true;\n    station.op = instruction.type;\n    station.instruction = instruction;\n    station.dest = instruction.dest;\n\n    // 设置操作数\n    if (instruction.src1) {\n      const reg1 = this.registers[parseInt(instruction.src1.replace('R', ''))];\n      if (reg1.qi) {\n        station.qj = reg1.qi;\n      } else {\n        station.vj = reg1.value;\n      }\n    }\n    if (instruction.src2) {\n      const reg2 = this.registers[parseInt(instruction.src2.replace('R', ''))];\n      if (reg2.qi) {\n        station.qk = reg2.qi;\n      } else {\n        station.vk = reg2.value;\n      }\n    }\n\n    // 更新寄存器状态\n    const destReg = this.registers[parseInt(instruction.dest.replace('R', ''))];\n    destReg.qi = station.name;\n    return true;\n  }\n\n  // 执行指令\n  execute() {\n    Object.values(this.reservationStations).flat().forEach(station => {\n      if (station.busy && !station.qj && !station.qk) {\n        if (station.remainingCycles === 0) {\n          // 设置执行周期\n          switch (station.op) {\n            case InstructionType.ADD:\n            case InstructionType.SUB:\n              station.remainingCycles = 2;\n              break;\n            case InstructionType.MUL:\n              station.remainingCycles = 10;\n              break;\n            case InstructionType.DIV:\n              station.remainingCycles = 40;\n              break;\n            case InstructionType.LD:\n              station.remainingCycles = 2;\n              break;\n          }\n        }\n        station.remainingCycles--;\n      }\n    });\n  }\n\n  // 写回结果\n  writeback() {\n    Object.values(this.reservationStations).flat().forEach(station => {\n      if (station.busy && station.remainingCycles === 0) {\n        // 计算结果\n        let result;\n        switch (station.op) {\n          case InstructionType.ADD:\n            result = station.vj + station.vk;\n            break;\n          case InstructionType.SUB:\n            result = station.vj - station.vk;\n            break;\n          case InstructionType.MUL:\n            result = station.vj * station.vk;\n            break;\n          case InstructionType.DIV:\n            result = station.vj / station.vk;\n            break;\n          case InstructionType.LD:\n            result = this.memory.get(station.immediate) || 0;\n            break;\n        }\n\n        // 更新寄存器\n        const destReg = this.registers[parseInt(station.dest.replace('R', ''))];\n        destReg.value = result;\n        destReg.qi = null;\n\n        // 更新其他等待该结果的保留站\n        Object.values(this.reservationStations).flat().forEach(otherStation => {\n          if (otherStation.qj === station.name) {\n            otherStation.vj = result;\n            otherStation.qj = null;\n          }\n          if (otherStation.qk === station.name) {\n            otherStation.vk = result;\n            otherStation.qk = null;\n          }\n        });\n        station.clear();\n      }\n    });\n  }\n\n  // 单步执行\n  step() {\n    this.currentCycle++;\n\n    // 尝试发射新指令\n    if (this.instructionQueue.length > 0) {\n      const nextInstruction = this.instructionQueue[0];\n      if (this.issue(nextInstruction)) {\n        this.instructionQueue.shift();\n      }\n    }\n    this.execute();\n    this.writeback();\n  }\n\n  // 重置模拟器\n  reset() {\n    this.registers = Array(32).fill().map(() => new RegisterStatus());\n    Object.values(this.reservationStations).flat().forEach(station => station.clear());\n    this.currentCycle = 0;\n    this.instructionQueue = [];\n  }\n\n  // 加载指令\n  loadInstructions(instructions) {\n    this.instructionQueue = instructions;\n  }\n}","map":{"version":3,"names":["InstructionType","ReservationStation","constructor","name","type","busy","op","vj","vk","qj","qk","dest","instruction","remainingCycles","clear","RegisterStatus","value","qi","TomasuloCore","registers","Array","fill","map","reservationStations","add","_","i","mult","load","instructions","currentCycle","instructionQueue","memory","Map","initializeMemory","addresses","forEach","address","set","getAvailableStation","stations","toLowerCase","find","station","issue","ADD","SUB","MUL","DIV","src1","reg1","parseInt","replace","src2","reg2","destReg","execute","Object","values","flat","LD","writeback","result","get","immediate","otherStation","step","length","nextInstruction","shift","reset","loadInstructions"],"sources":["D:/vscode/Tomasulo/src/utils/tomasuloCore.js"],"sourcesContent":["import { InstructionType } from './instructionParser';\r\n\r\n// 保留站类\r\nexport class ReservationStation {\r\n  constructor(name, type) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.busy = false;\r\n    this.op = null;\r\n    this.vj = null;\r\n    this.vk = null;\r\n    this.qj = null;\r\n    this.qk = null;\r\n    this.dest = null;\r\n    this.instruction = null;\r\n    this.remainingCycles = 0;\r\n  }\r\n\r\n  clear() {\r\n    this.busy = false;\r\n    this.op = null;\r\n    this.vj = null;\r\n    this.vk = null;\r\n    this.qj = null;\r\n    this.qk = null;\r\n    this.dest = null;\r\n    this.instruction = null;\r\n    this.remainingCycles = 0;\r\n  }\r\n}\r\n\r\n// 寄存器状态类\r\nexport class RegisterStatus {\r\n  constructor() {\r\n    this.value = 0;\r\n    this.qi = null; // 指向产生该寄存器值的保留站\r\n  }\r\n}\r\n\r\n// Tomasulo算法核心类\r\nexport class TomasuloCore {\r\n  constructor() {\r\n    this.registers = Array(32).fill().map(() => new RegisterStatus());\r\n    this.reservationStations = {\r\n      add: Array(3).fill().map((_, i) => new ReservationStation(`ADD${i + 1}`, 'ADD')),\r\n      mult: Array(2).fill().map((_, i) => new ReservationStation(`MULT${i + 1}`, 'MULT')),\r\n      load: Array(2).fill().map((_, i) => new ReservationStation(`LOAD${i + 1}`, 'LOAD'))\r\n    };\r\n    this.instructions = [];\r\n    this.currentCycle = 0;\r\n    this.instructionQueue = [];\r\n    this.memory = new Map();\r\n  }\r\n\r\n  // 初始化内存\r\n  initializeMemory(addresses) {\r\n    addresses.forEach(({ address, value }) => {\r\n      this.memory.set(address, value);\r\n    });\r\n  }\r\n\r\n  // 获取可用的保留站\r\n  getAvailableStation(type) {\r\n    const stations = this.reservationStations[type.toLowerCase()];\r\n    return stations.find(station => !station.busy);\r\n  }\r\n\r\n  // 发射指令\r\n  issue(instruction) {\r\n    const station = this.getAvailableStation(\r\n      instruction.type === InstructionType.ADD || instruction.type === InstructionType.SUB\r\n        ? 'ADD'\r\n        : instruction.type === InstructionType.MUL || instruction.type === InstructionType.DIV\r\n        ? 'MULT'\r\n        : 'LOAD'\r\n    );\r\n\r\n    if (!station) return false;\r\n\r\n    station.busy = true;\r\n    station.op = instruction.type;\r\n    station.instruction = instruction;\r\n    station.dest = instruction.dest;\r\n\r\n    // 设置操作数\r\n    if (instruction.src1) {\r\n      const reg1 = this.registers[parseInt(instruction.src1.replace('R', ''))];\r\n      if (reg1.qi) {\r\n        station.qj = reg1.qi;\r\n      } else {\r\n        station.vj = reg1.value;\r\n      }\r\n    }\r\n\r\n    if (instruction.src2) {\r\n      const reg2 = this.registers[parseInt(instruction.src2.replace('R', ''))];\r\n      if (reg2.qi) {\r\n        station.qk = reg2.qi;\r\n      } else {\r\n        station.vk = reg2.value;\r\n      }\r\n    }\r\n\r\n    // 更新寄存器状态\r\n    const destReg = this.registers[parseInt(instruction.dest.replace('R', ''))];\r\n    destReg.qi = station.name;\r\n\r\n    return true;\r\n  }\r\n\r\n  // 执行指令\r\n  execute() {\r\n    Object.values(this.reservationStations).flat().forEach(station => {\r\n      if (station.busy && !station.qj && !station.qk) {\r\n        if (station.remainingCycles === 0) {\r\n          // 设置执行周期\r\n          switch (station.op) {\r\n            case InstructionType.ADD:\r\n            case InstructionType.SUB:\r\n              station.remainingCycles = 2;\r\n              break;\r\n            case InstructionType.MUL:\r\n              station.remainingCycles = 10;\r\n              break;\r\n            case InstructionType.DIV:\r\n              station.remainingCycles = 40;\r\n              break;\r\n            case InstructionType.LD:\r\n              station.remainingCycles = 2;\r\n              break;\r\n          }\r\n        }\r\n        station.remainingCycles--;\r\n      }\r\n    });\r\n  }\r\n\r\n  // 写回结果\r\n  writeback() {\r\n    Object.values(this.reservationStations).flat().forEach(station => {\r\n      if (station.busy && station.remainingCycles === 0) {\r\n        // 计算结果\r\n        let result;\r\n        switch (station.op) {\r\n          case InstructionType.ADD:\r\n            result = station.vj + station.vk;\r\n            break;\r\n          case InstructionType.SUB:\r\n            result = station.vj - station.vk;\r\n            break;\r\n          case InstructionType.MUL:\r\n            result = station.vj * station.vk;\r\n            break;\r\n          case InstructionType.DIV:\r\n            result = station.vj / station.vk;\r\n            break;\r\n          case InstructionType.LD:\r\n            result = this.memory.get(station.immediate) || 0;\r\n            break;\r\n        }\r\n\r\n        // 更新寄存器\r\n        const destReg = this.registers[parseInt(station.dest.replace('R', ''))];\r\n        destReg.value = result;\r\n        destReg.qi = null;\r\n\r\n        // 更新其他等待该结果的保留站\r\n        Object.values(this.reservationStations).flat().forEach(otherStation => {\r\n          if (otherStation.qj === station.name) {\r\n            otherStation.vj = result;\r\n            otherStation.qj = null;\r\n          }\r\n          if (otherStation.qk === station.name) {\r\n            otherStation.vk = result;\r\n            otherStation.qk = null;\r\n          }\r\n        });\r\n\r\n        station.clear();\r\n      }\r\n    });\r\n  }\r\n\r\n  // 单步执行\r\n  step() {\r\n    this.currentCycle++;\r\n    \r\n    // 尝试发射新指令\r\n    if (this.instructionQueue.length > 0) {\r\n      const nextInstruction = this.instructionQueue[0];\r\n      if (this.issue(nextInstruction)) {\r\n        this.instructionQueue.shift();\r\n      }\r\n    }\r\n\r\n    this.execute();\r\n    this.writeback();\r\n  }\r\n\r\n  // 重置模拟器\r\n  reset() {\r\n    this.registers = Array(32).fill().map(() => new RegisterStatus());\r\n    Object.values(this.reservationStations).flat().forEach(station => station.clear());\r\n    this.currentCycle = 0;\r\n    this.instructionQueue = [];\r\n  }\r\n\r\n  // 加载指令\r\n  loadInstructions(instructions) {\r\n    this.instructionQueue = instructions;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}