{"ast":null,"code":"// 指令类型枚举\nexport const InstructionType = {\n  ADD: 'ADD',\n  SUB: 'SUB',\n  MUL: 'MUL',\n  DIV: 'DIV',\n  LD: 'LD',\n  SD: 'SD'\n};\n\n// 指令类\nexport class Instruction {\n  constructor(type, dest, src1, src2, immediate = null) {\n    this.type = type;\n    this.dest = dest;\n    this.src1 = src1;\n    this.src2 = src2;\n    this.immediate = immediate;\n    this.status = 'ISSUE'; // ISSUE, EXECUTE, WRITEBACK, COMMIT\n    this.issueTime = null;\n    this.execTime = null;\n    this.writeTime = null;\n    this.commitTime = null;\n  }\n}\n\n// 解析MIPS指令\nexport function parseInstruction(instruction) {\n  const parts = instruction.trim().split(/\\s*,\\s*|\\s+/);\n  const opcode = parts[0].toUpperCase();\n  switch (opcode) {\n    case 'ADD':\n      return new Instruction(InstructionType.ADD, parts[1], parts[2], parts[3]);\n    case 'SUB':\n      return new Instruction(InstructionType.SUB, parts[1], parts[2], parts[3]);\n    case 'MUL':\n      return new Instruction(InstructionType.MUL, parts[1], parts[2], parts[3]);\n    case 'DIV':\n      return new Instruction(InstructionType.DIV, parts[1], parts[2], parts[3]);\n    case 'LD':\n      return new Instruction(InstructionType.LD, parts[1], null, null, parts[2]);\n    case 'SD':\n      return new Instruction(InstructionType.SD, parts[1], null, null, parts[2]);\n    default:\n      throw new Error(`不支持的指令: ${opcode}`);\n  }\n}\n\n// 解析多条指令\nexport function parseInstructions(instructions) {\n  return instructions.split('\\n').filter(line => line.trim()).map(line => parseInstruction(line));\n}","map":{"version":3,"names":["InstructionType","ADD","SUB","MUL","DIV","LD","SD","Instruction","constructor","type","dest","src1","src2","immediate","status","issueTime","execTime","writeTime","commitTime","parseInstruction","instruction","parts","trim","split","opcode","toUpperCase","Error","parseInstructions","instructions","filter","line","map"],"sources":["D:/vscode/Tomasulo/src/utils/instructionParser.js"],"sourcesContent":["// 指令类型枚举\r\nexport const InstructionType = {\r\n  ADD: 'ADD',\r\n  SUB: 'SUB',\r\n  MUL: 'MUL',\r\n  DIV: 'DIV',\r\n  LD: 'LD',\r\n  SD: 'SD'\r\n};\r\n\r\n// 指令类\r\nexport class Instruction {\r\n  constructor(type, dest, src1, src2, immediate = null) {\r\n    this.type = type;\r\n    this.dest = dest;\r\n    this.src1 = src1;\r\n    this.src2 = src2;\r\n    this.immediate = immediate;\r\n    this.status = 'ISSUE'; // ISSUE, EXECUTE, WRITEBACK, COMMIT\r\n    this.issueTime = null;\r\n    this.execTime = null;\r\n    this.writeTime = null;\r\n    this.commitTime = null;\r\n  }\r\n}\r\n\r\n// 解析MIPS指令\r\nexport function parseInstruction(instruction) {\r\n  const parts = instruction.trim().split(/\\s*,\\s*|\\s+/);\r\n  const opcode = parts[0].toUpperCase();\r\n  \r\n  switch (opcode) {\r\n    case 'ADD':\r\n      return new Instruction(InstructionType.ADD, parts[1], parts[2], parts[3]);\r\n    case 'SUB':\r\n      return new Instruction(InstructionType.SUB, parts[1], parts[2], parts[3]);\r\n    case 'MUL':\r\n      return new Instruction(InstructionType.MUL, parts[1], parts[2], parts[3]);\r\n    case 'DIV':\r\n      return new Instruction(InstructionType.DIV, parts[1], parts[2], parts[3]);\r\n    case 'LD':\r\n      return new Instruction(InstructionType.LD, parts[1], null, null, parts[2]);\r\n    case 'SD':\r\n      return new Instruction(InstructionType.SD, parts[1], null, null, parts[2]);\r\n    default:\r\n      throw new Error(`不支持的指令: ${opcode}`);\r\n  }\r\n}\r\n\r\n// 解析多条指令\r\nexport function parseInstructions(instructions) {\r\n  return instructions\r\n    .split('\\n')\r\n    .filter(line => line.trim())\r\n    .map(line => parseInstruction(line));\r\n} "],"mappings":"AAAA;AACA,OAAO,MAAMA,eAAe,GAAG;EAC7BC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE;AACN,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,CAAC;EACvBC,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,GAAG,IAAI,EAAE;IACpD,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAG,OAAO,CAAC,CAAC;IACvB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,UAAU,GAAG,IAAI;EACxB;AACF;;AAEA;AACA,OAAO,SAASC,gBAAgBA,CAACC,WAAW,EAAE;EAC5C,MAAMC,KAAK,GAAGD,WAAW,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,aAAa,CAAC;EACrD,MAAMC,MAAM,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;EAErC,QAAQD,MAAM;IACZ,KAAK,KAAK;MACR,OAAO,IAAIjB,WAAW,CAACP,eAAe,CAACC,GAAG,EAAEoB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3E,KAAK,KAAK;MACR,OAAO,IAAId,WAAW,CAACP,eAAe,CAACE,GAAG,EAAEmB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3E,KAAK,KAAK;MACR,OAAO,IAAId,WAAW,CAACP,eAAe,CAACG,GAAG,EAAEkB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3E,KAAK,KAAK;MACR,OAAO,IAAId,WAAW,CAACP,eAAe,CAACI,GAAG,EAAEiB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3E,KAAK,IAAI;MACP,OAAO,IAAId,WAAW,CAACP,eAAe,CAACK,EAAE,EAAEgB,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5E,KAAK,IAAI;MACP,OAAO,IAAId,WAAW,CAACP,eAAe,CAACM,EAAE,EAAEe,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5E;MACE,MAAM,IAAIK,KAAK,CAAC,WAAWF,MAAM,EAAE,CAAC;EACxC;AACF;;AAEA;AACA,OAAO,SAASG,iBAAiBA,CAACC,YAAY,EAAE;EAC9C,OAAOA,YAAY,CAChBL,KAAK,CAAC,IAAI,CAAC,CACXM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAC3BS,GAAG,CAACD,IAAI,IAAIX,gBAAgB,CAACW,IAAI,CAAC,CAAC;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}