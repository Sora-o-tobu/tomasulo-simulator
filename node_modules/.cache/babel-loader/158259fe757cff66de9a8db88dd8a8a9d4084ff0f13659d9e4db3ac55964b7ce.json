{"ast":null,"code":"// 指令类型枚举\nexport const InstructionType={ADD:'ADD',SUB:'SUB',MUL:'MUL',DIV:'DIV',LD:'LD',SD:'SD'};// 指令类\nexport class Instruction{constructor(type,dest,src1,src2){let immediate=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;this.type=type;this.dest=dest;this.src1=src1;this.src2=src2;this.immediate=immediate;this.status='ISSUE';// ISSUE, EXECUTE, WRITEBACK, COMMIT\nthis.issueTime=null;this.execTime=null;this.writeTime=null;this.commitTime=null;}}// 解析MIPS指令\nexport function parseInstruction(instruction){const parts=instruction.trim().split(/\\s*,\\s*|\\s+/);const opcode=parts[0].toUpperCase();switch(opcode){case'ADD':return new Instruction(InstructionType.ADD,parts[1],parts[2],parts[3]);case'SUB':return new Instruction(InstructionType.SUB,parts[1],parts[2],parts[3]);case'MUL':return new Instruction(InstructionType.MUL,parts[1],parts[2],parts[3]);case'DIV':return new Instruction(InstructionType.DIV,parts[1],parts[2],parts[3]);case'LD':return new Instruction(InstructionType.LD,parts[1],null,null,parts[2]);case'SD':return new Instruction(InstructionType.SD,parts[1],null,null,parts[2]);default:throw new Error(\"\\u4E0D\\u652F\\u6301\\u7684\\u6307\\u4EE4: \".concat(opcode));}}// 解析多条指令\nexport function parseInstructions(instructions){return instructions.split('\\n').filter(line=>line.trim()).map(line=>parseInstruction(line));}","map":{"version":3,"names":["InstructionType","ADD","SUB","MUL","DIV","LD","SD","Instruction","constructor","type","dest","src1","src2","immediate","arguments","length","undefined","status","issueTime","execTime","writeTime","commitTime","parseInstruction","instruction","parts","trim","split","opcode","toUpperCase","Error","concat","parseInstructions","instructions","filter","line","map"],"sources":["D:/vscode/Tomasulo/src/utils/instructionParser.js"],"sourcesContent":["// 指令类型枚举\r\nexport const InstructionType = {\r\n  ADD: 'ADD',\r\n  SUB: 'SUB',\r\n  MUL: 'MUL',\r\n  DIV: 'DIV',\r\n  LD: 'LD',\r\n  SD: 'SD'\r\n};\r\n\r\n// 指令类\r\nexport class Instruction {\r\n  constructor(type, dest, src1, src2, immediate = null) {\r\n    this.type = type;\r\n    this.dest = dest;\r\n    this.src1 = src1;\r\n    this.src2 = src2;\r\n    this.immediate = immediate;\r\n    this.status = 'ISSUE'; // ISSUE, EXECUTE, WRITEBACK, COMMIT\r\n    this.issueTime = null;\r\n    this.execTime = null;\r\n    this.writeTime = null;\r\n    this.commitTime = null;\r\n  }\r\n}\r\n\r\n// 解析MIPS指令\r\nexport function parseInstruction(instruction) {\r\n  const parts = instruction.trim().split(/\\s*,\\s*|\\s+/);\r\n  const opcode = parts[0].toUpperCase();\r\n  \r\n  switch (opcode) {\r\n    case 'ADD':\r\n      return new Instruction(InstructionType.ADD, parts[1], parts[2], parts[3]);\r\n    case 'SUB':\r\n      return new Instruction(InstructionType.SUB, parts[1], parts[2], parts[3]);\r\n    case 'MUL':\r\n      return new Instruction(InstructionType.MUL, parts[1], parts[2], parts[3]);\r\n    case 'DIV':\r\n      return new Instruction(InstructionType.DIV, parts[1], parts[2], parts[3]);\r\n    case 'LD':\r\n      return new Instruction(InstructionType.LD, parts[1], null, null, parts[2]);\r\n    case 'SD':\r\n      return new Instruction(InstructionType.SD, parts[1], null, null, parts[2]);\r\n    default:\r\n      throw new Error(`不支持的指令: ${opcode}`);\r\n  }\r\n}\r\n\r\n// 解析多条指令\r\nexport function parseInstructions(instructions) {\r\n  return instructions\r\n    .split('\\n')\r\n    .filter(line => line.trim())\r\n    .map(line => parseInstruction(line));\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}